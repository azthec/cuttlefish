plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'com.google.protobuf' version '0.8.7'
}

group 'org.teamdoubleb'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // Common libraries
    compile group: 'commons-codec', name: 'commons-codec', version: '1.9'

    // Jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.v20180830'

    //Jersey
    compile group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.27'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.27'
    compile group: 'org.glassfish.jersey.core', name: 'jersey-common', version: '2.27'
    compile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.27'
    compile group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.27'

    //Atomix dependency
    compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'
    //Atomix
    compile group: 'io.atomix', name: 'atomix', version: '3.0.7'
    compile group: 'io.atomix', name: 'atomix-raft', version: '3.0.7'
    compile group: 'io.atomix', name: 'atomix-primary-backup', version: '3.0.7'
    compile group: 'io.atomix', name: 'atomix-gossip', version: '3.0.7'


    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.6.1'
    // compile group: 'com.google.protobuf', name: 'protoc', version: '3.6.1', ext: 'pom'
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto'
        }
        java {
            // include self written and generated code
            srcDirs 'src/main/java', 'generated-sources/main/java'
        }
    }
    // remove the test configuration - at least in your example you don't have a special test proto file
}

protobuf {
    // Configure the protoc executable
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }

    generateProtoTasks.generatedFilesBaseDir = 'generated-sources'

    generateProtoTasks {
        // all() returns the collection of all protoc tasks
        all().each { task ->
            // Here you can configure the task
        }

        // In addition to all(), you may get the task collection by various
        // criteria:

        // (Java only) returns tasks for a sourceSet
        ofSourceSet('main')

    }
}